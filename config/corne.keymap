/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <3000>;
};

/ {
    combos {
        compatible = "zmk,combos";

        new_combo {
            bindings = <&mo 3>;
            key-positions = <37 40>;
        };
    };

    behaviors {
        shift_lock: shift_lock {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_LOCK";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_SHIFT>,
                <&kp CAPSLOCK>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            label = "Base";
            bindings = <
&mt LG(TAB) TAB   &mt LG(Q) Q  &mt LG(W) W  &mt LG(E) E  &mt LG(R) R  &mt LG(T) T                    &mt LG(Y) Y  &mt LG(U) U  &mt LG(I) I          &mt LG(O) O            &mt LG(P) P                  &kp ESC
&kp LEFT_CONTROL  &mt LG(A) A  &mt LG(S) S  &mt LG(D) D  &mt LG(F) F  &mt LG(G) G                    &mt LG(H) H  &mt LG(J) J  &mt LEFT_GUI LG(K)   &mt LG(L) L            &mt LG(SEMICOLON) SEMICOLON  &mt LG(SQT) SQT
&kp LEFT_ALT      &mt LG(Z) Z  &mt LG(X) X  &mt LG(C) C  &mt LG(V) V  &mt LG(B) B                    &mt LG(N) N  &mt LG(M) M  &mt LG(COMMA) COMMA  &mt LG(PERIOD) PERIOD  &mt LG(SLASH) SLASH          &kp ENTER
                                            &kp LGUI     &mo 2        &mt LA(BACKSPACE) BACKSPACE    &kp SPACE    &mo 1        &shift_lock
            >;
        };

        symbols {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Symbols";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT       &kp CARET       &kp AMPS   &kp ASTERISK   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp TILDE
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp MINUS       &kp EQUAL  &kp BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GRAVE
&trans  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0    &kp UNDERSCORE  &kp PLUS   &kp PIPE       &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans
                                    &trans        &trans        &trans          &trans          &trans     &trans
            >;
        };

        functions {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            label = "Function";
            bindings = <
&trans  &kp ASTERISK  &kp N1  &kp NUMBER_2  &kp N3        &kp MINUS    &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS           &kp C_PP                   &kp C_NEXT       &kp LG(LS(NUMBER_5))  &trans
&trans  &kp SLASH     &kp N4  &kp N5        &kp NUMBER_6  &kp PLUS     &kp LEFT              &mt LA(DOWN_ARROW) DOWN  &mt LA(UP_ARROW) UP_ARROW  &kp RIGHT        &none                 &none
&trans  &kp PERIOD    &kp N7  &kp N8        &kp N9        &kp EQUAL    &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN        &kp C_MUTE                 &kp C_VOLUME_UP  &kp LG(LS(NUMBER_4))  &trans
                              &kp NUMBER_0  &trans        &trans       &trans                &trans                   &trans
            >;
        };

        bluetooth {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none   &none   &none  &bt BT_CLR  &trans
&trans  &none         &none         &none         &none         &none           &none   &none   &none   &none  &none       &none
&trans  &none         &none         &none         &none         &none           &none   &none   &none   &none  &none       &trans
                                    &trans        &trans        &trans          &trans  &trans  &trans
            >;

            label = "Bluetooth";
        };
    };
};
